%% @author rafat
%% @doc @todo Add description to test.
%%Configuration script

-module(test).
-compile(export_all).

start() ->
  io:format("Starting the demo, initilize the cities ~n"),
  routy:start(stockholm, stockholm),
  io:format("stockholm is live ~n"),
  routy:start(lund, lund),
  io:format("lund is live ~n"),
  routy:start(uppsala, uppsala),
  io:format("uppsala is live ~n"),
  routy:start(goteborg, goteborg),
  io:format("goteborg is live ~n"),
  routy:start(malmo, malmo),
  io:format("malmo is live ~n"),
  routy:start(umea, umea),
  io:format("umea is live ~n"),
  routy:start(visby, visby),
  io:format("visby is live ~n"),
  routy:start(linkoping, linkoping),
  io:format("linkoping is live ~n"),

  stockholm ! {add, lund, {lund, node()}},
  lund ! {add, stockholm, {stockholm, node()}},
  io:format("stockholm and lund are connected ~n"),
  lund ! {add, uppsala, {uppsala, node()}},
  uppsala ! {add, lund, {lund, node()}},
  io:format("lund and uppsala are connected ~n"),
  lund ! {add, goteborg, {goteborg, node()}},
  goteborg ! {add, lund, {lund, node()}},
  io:format("lund and goteborg are connected ~n"),
  uppsala ! {add, malmo, {malmo, node()}},
  malmo ! {add, uppsala, {uppsala, node()}},
  io:format("uppsala and malmo are connected ~n"),
  goteborg ! {add, visby, {visby, node()}},
  visby ! {add, goteborg, {goteborg, node()}},
  io:format("goteborg and visby are connected ~n"),
  malmo ! {add, umea, {umea, node()}},
  umea ! {add, malmo, {malmo, node()}},
  io:format("umea and malmo are connected ~n"),
  umea ! {add, visby, {visby, node()}},
  visby ! {add, umea, {umea, node()}},
  io:format("umea and visby are connected ~n"),
  visby ! {add, linkoping,{linkoping,node()}},
  linkoping ! {add, visby,{visby,node()}},
  io:format("visby and linkoping are connected ~n"),
  
  stockholm ! broadcast,
  timer:sleep(1000),
  io:format("stockholm starts brodcasting ~n"),
  lund ! broadcast,
  timer:sleep(1000),
  io:format("lund starts brodcasting ~n"),
  uppsala ! broadcast,
  timer:sleep(1000),
  io:format("uppsala starts brodcasting ~n"),
  goteborg ! broadcast,
  timer:sleep(1000),
  io:format("goteborg starts brodcasting ~n"),
  malmo ! broadcast,
  timer:sleep(1000),
  io:format("malmo starts brodcasting ~n"),
  umea ! broadcast,
  timer:sleep(1000),
  io:format("umea starts brodcasting ~n"),
  visby ! broadcast,
  timer:sleep(1000),
  io:format("visby starts brodcasting ~n"),
  linkoping ! broadcast,
  timer:sleep(1000),
  io:format("linkoping starts brodcasting ~n"),
  
  stockholm ! update,
  timer:sleep(1000),
  io:format("routing table updated for stockholm ~n"),
  lund ! update,
  timer:sleep(1000),
  io:format("routing table updated for lund ~n"),
  uppsala ! update,
  timer:sleep(1000),
  io:format("routing table updated for uppsala ~n"),
  goteborg ! update,
  timer:sleep(1000),
  malmo ! update,
  timer:sleep(1000),
  io:format("routing table updated for malmo ~n"),
  umea ! update,
  timer:sleep(1000),
  io:format("routing table updated for umea ~n"),
  visby ! update,
  timer:sleep(1000),
  io:format("routing table updated for visby ~n"),
  linkoping ! update,
  timer:sleep(1000),
  io:format("routing table updated for linkoping ~n").

stop() ->
	stockholm ! stop,
	lund ! stop,
	uppsala ! stop,
	goteborg ! stop,
	malmo ! stop,
	umea ! stop,
	visby ! stop,
	linkoping ! stop.
  
  
status(Node) ->
	routy:status(Node).

status_all() ->
  routy:status(stockholm),
  routy:status(lund),
  routy:status(uppsala),
  routy:status(goteborg),
  routy:status(malmo),
  routy:status(umea),
  routy:status(visby),
  routy:status(linkoping).